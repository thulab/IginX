#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from iginx.thrift.rpc import IService
from iginx.thrift.rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  OpenSessionResp openSession(OpenSessionReq req)')
    print('  Status closeSession(CloseSessionReq req)')
    print('  Status deleteColumns(DeleteColumnsReq req)')
    print('  Status insertColumnRecords(InsertColumnRecordsReq req)')
    print('  Status insertNonAlignedColumnRecords(InsertNonAlignedColumnRecordsReq req)')
    print('  Status insertRowRecords(InsertRowRecordsReq req)')
    print('  Status insertNonAlignedRowRecords(InsertNonAlignedRowRecordsReq req)')
    print('  Status deleteDataInColumns(DeleteDataInColumnsReq req)')
    print('  QueryDataResp queryData(QueryDataReq req)')
    print('  Status addStorageEngines(AddStorageEnginesReq req)')
    print('  AggregateQueryResp aggregateQuery(AggregateQueryReq req)')
    print('  LastQueryResp lastQuery(LastQueryReq req)')
    print('  DownsampleQueryResp downsampleQuery(DownsampleQueryReq req)')
    print('  ShowColumnsResp showColumns(ShowColumnsReq req)')
    print('  GetReplicaNumResp getReplicaNum(GetReplicaNumReq req)')
    print('  ExecuteSqlResp executeSql(ExecuteSqlReq req)')
    print('  Status updateUser(UpdateUserReq req)')
    print('  Status addUser(AddUserReq req)')
    print('  Status deleteUser(DeleteUserReq req)')
    print('  GetUserResp getUser(GetUserReq req)')
    print('  GetClusterInfoResp getClusterInfo(GetClusterInfoReq req)')
    print('  ExecuteStatementResp executeStatement(ExecuteStatementReq req)')
    print('  FetchResultsResp fetchResults(FetchResultsReq req)')
    print('  Status closeStatement(CloseStatementReq req)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IService.Client(protocol)
transport.open()

if cmd == 'openSession':
    if len(args) != 1:
        print('openSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.openSession(eval(args[0]),))

elif cmd == 'closeSession':
    if len(args) != 1:
        print('closeSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.closeSession(eval(args[0]),))

elif cmd == 'deleteColumns':
    if len(args) != 1:
        print('deleteColumns requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteColumns(eval(args[0]),))

elif cmd == 'insertColumnRecords':
    if len(args) != 1:
        print('insertColumnRecords requires 1 args')
        sys.exit(1)
    pp.pprint(client.insertColumnRecords(eval(args[0]),))

elif cmd == 'insertNonAlignedColumnRecords':
    if len(args) != 1:
        print('insertNonAlignedColumnRecords requires 1 args')
        sys.exit(1)
    pp.pprint(client.insertNonAlignedColumnRecords(eval(args[0]),))

elif cmd == 'insertRowRecords':
    if len(args) != 1:
        print('insertRowRecords requires 1 args')
        sys.exit(1)
    pp.pprint(client.insertRowRecords(eval(args[0]),))

elif cmd == 'insertNonAlignedRowRecords':
    if len(args) != 1:
        print('insertNonAlignedRowRecords requires 1 args')
        sys.exit(1)
    pp.pprint(client.insertNonAlignedRowRecords(eval(args[0]),))

elif cmd == 'deleteDataInColumns':
    if len(args) != 1:
        print('deleteDataInColumns requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteDataInColumns(eval(args[0]),))

elif cmd == 'queryData':
    if len(args) != 1:
        print('queryData requires 1 args')
        sys.exit(1)
    pp.pprint(client.queryData(eval(args[0]),))

elif cmd == 'addStorageEngines':
    if len(args) != 1:
        print('addStorageEngines requires 1 args')
        sys.exit(1)
    pp.pprint(client.addStorageEngines(eval(args[0]),))

elif cmd == 'aggregateQuery':
    if len(args) != 1:
        print('aggregateQuery requires 1 args')
        sys.exit(1)
    pp.pprint(client.aggregateQuery(eval(args[0]),))

elif cmd == 'lastQuery':
    if len(args) != 1:
        print('lastQuery requires 1 args')
        sys.exit(1)
    pp.pprint(client.lastQuery(eval(args[0]),))

elif cmd == 'downsampleQuery':
    if len(args) != 1:
        print('downsampleQuery requires 1 args')
        sys.exit(1)
    pp.pprint(client.downsampleQuery(eval(args[0]),))

elif cmd == 'showColumns':
    if len(args) != 1:
        print('showColumns requires 1 args')
        sys.exit(1)
    pp.pprint(client.showColumns(eval(args[0]),))

elif cmd == 'getReplicaNum':
    if len(args) != 1:
        print('getReplicaNum requires 1 args')
        sys.exit(1)
    pp.pprint(client.getReplicaNum(eval(args[0]),))

elif cmd == 'executeSql':
    if len(args) != 1:
        print('executeSql requires 1 args')
        sys.exit(1)
    pp.pprint(client.executeSql(eval(args[0]),))

elif cmd == 'updateUser':
    if len(args) != 1:
        print('updateUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateUser(eval(args[0]),))

elif cmd == 'addUser':
    if len(args) != 1:
        print('addUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.addUser(eval(args[0]),))

elif cmd == 'deleteUser':
    if len(args) != 1:
        print('deleteUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteUser(eval(args[0]),))

elif cmd == 'getUser':
    if len(args) != 1:
        print('getUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUser(eval(args[0]),))

elif cmd == 'getClusterInfo':
    if len(args) != 1:
        print('getClusterInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getClusterInfo(eval(args[0]),))

elif cmd == 'executeStatement':
    if len(args) != 1:
        print('executeStatement requires 1 args')
        sys.exit(1)
    pp.pprint(client.executeStatement(eval(args[0]),))

elif cmd == 'fetchResults':
    if len(args) != 1:
        print('fetchResults requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchResults(eval(args[0]),))

elif cmd == 'closeStatement':
    if len(args) != 1:
        print('closeStatement requires 1 args')
        sys.exit(1)
    pp.pprint(client.closeStatement(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
